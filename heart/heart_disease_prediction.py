# -*- coding: utf-8 -*-
"""heart_disease_prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XwBDy9qsgIu3n35vt4-ewUgJZiGoTWfB
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

heart_dataset=pd.read_csv('/content/heart.csv')

heart_dataset.head()

heart_dataset.shape

heart_dataset.info()

#checking for missing value
heart_dataset.isnull().sum()

#statistical measures of data
heart_dataset.describe()

#checking distribution of target_feature in dataset
heart_dataset['target'].value_counts()

"""1-->unhealthy heart

0->healthy heart

splitting target and features
"""

X=heart_dataset.drop(columns='target',axis=1)
Y=heart_dataset['target']

print(X)

print(Y)

"""split to training and test data"""

X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2,stratify=Y,random_state=2)
#stratify=Y split the data in even manner between train and test data with respect to Y that is target

"""Model training

training logistic regression model
"""

model=LogisticRegression()

model.fit(X_train,Y_train)

"""Model Evaluation"""

#Accuray on training data

X_train_pred=model.predict(X_train)
training_accuracy=accuracy_score(X_train_pred,Y_train)

#Accuray on test data

X_test_pred=model.predict(X_test)
test_accuracy=accuracy_score(X_test_pred,Y_test)

print('training Accuracy : ',training_accuracy,'test Accuracy : ',test_accuracy)

"""Buliding predictive System"""

input_data=(52,1,0,125,212,0,1,168,0,1,2,2,3)

#change input data to numpy array
input_data_as_numpy_array=np.asarray(input_data)

#reshape array as we are predicting for only one instance
input_data_reshaped=input_data_as_numpy_array.reshape(1,-1)

prediction=model.predict(input_data_reshaped)

if (prediction[0]==0):
  print('you have healthy heart')
else:
  print('you have unhealthy heart!!!')

input_data=(50,0,1,120,244,0,1,162,0,1.1,2,0,2)

#change input data to numpy array
input_data_as_numpy_array=np.asarray(input_data)

#reshape array as we are predicting for only one instance
input_data_reshaped=input_data_as_numpy_array.reshape(1,-1)

prediction=model.predict(input_data_reshaped)

if (prediction[0]==0):
  print('you have healthy heart')
else:
  print('you have unhealthy heart!!!')

